# Authors: Code generated by Google Gemini and comments done by Daniel Holgate
# Date: 19/08/2025
# Description: Code for extracting correctly formatted and generated themes from the output file of Themes.py. Needed 
# because the theme extraction is erratic on larger numbers of stories and incorrectly generated output can cause issues
# as needs both a theme sentence and theme word to be usable.

import re

from decouple import config

SG_PATH = config("SG_PATH")

# Method for extracting correctly generated theme sentence-word pairs.
def extract_valid_theme_pairs(file_path):
    # Reads in the whole input file.
    with open(file_path, 'r', encoding='utf-8') as f:
        lines = f.readlines()

    theme_entries = []
    current_story = None
    theme_sentence = None
    theme_word = None

    for line in lines:
        line = line.strip()

        # Ignores lines where clearly has failed.
        if "Theme extraction failed" in line or "Parsing error" in line:
            continue

        # Goes through line by line, removing the line and saving the well-formed ones in their respective variables.
        if line.startswith("Story:"):
            current_story = line.replace("Story:", "").strip()
            theme_sentence = None
            theme_word = None

        elif line.startswith("Theme Sentence:"):
            theme_sentence = line.replace("Theme Sentence:", "").strip()

        elif line.startswith("Theme Word:"):
            theme_word = line.replace("Theme Word:", "").strip()

        # If the end of a block, checks if it has all the necessary parts.
        elif line == "---":
            if (
                # If have a story id with a theme sentence and word and theme sentence is not for (for some reason tends to generate
                # that as the theme word if it does not do it correctly) then adds the pair with id to the collection of themes.
                current_story and
                theme_sentence and theme_word and
                theme_word.lower() != "for" and
                not theme_word.isspace()
            ):
                theme_entries.append((current_story, theme_sentence, theme_word))
            current_story = None
            theme_sentence = None
            theme_word = None

    return theme_entries


# Main method for performing the extraction of well-formed theme output.
if __name__ == "__main__":
    # Files for input and output. Need to be adjusted for the files you are using. 
    # The input is the output from your Themes.py code and the output can be named whatever you would like.
    theme_log_path = f"{SG_PATH}/extracted_themes_Glot800.txt"  
    output_path = f"{SG_PATH}/cleaned_themes_Glot800.txt"

    valid_theme_data = extract_valid_theme_pairs(theme_log_path)

    # Writes all the themes to the output file.
    with open(output_path, 'w', encoding='utf-8') as out_file:
        for story_id, sentence, word in valid_theme_data:
            out_file.write(f"Story: {story_id}\n")
            out_file.write(f"Theme Sentence: {sentence}\n")
            out_file.write(f"Theme Word: {word}\n")
            out_file.write("---\n\n")

    # print(f"âœ… {len(valid_theme_data)} valid theme entries written to '{output_path}'")
